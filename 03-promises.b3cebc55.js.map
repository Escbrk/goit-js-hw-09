{"mappings":"gfAAA,IAUIA,EAVJC,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,UAAWL,SAASC,cAAc,oBAoBpCH,EAAKO,UAAUC,iBAAiB,SAEhC,SAAkBC,GAChBA,EAAEC,iBAMF,IALA,IAAMC,EAAaC,OAAOZ,EAAKI,MAAMS,OAC/BC,EAAYF,OAAOZ,EAAKK,KAAKQ,OAE7BE,EAAQH,OAAOZ,EAAKM,OAAOO,OAExBG,EAAI,EAAGA,EAAID,EAAOC,GAAK,EACpBL,EAAaG,EACvBG,cAAcpB,GAGhBA,EAAaqB,aAAY,WA7B3B,IAAuBC,EAAUf,EACzBgB,EACAC,GAFeF,EA8BLR,EA9BeP,EA8BHU,EA7BtBM,EAAM,CAAED,WAAUf,SAClBiB,EAAgBC,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAAKC,GACnBL,EAEFI,EAAIL,GAGJM,EAAIN,E,KAqBHO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUf,EAAKwB,EAALxB,MACjBN,EAAA+B,OAAOC,QAAQ,qBAAoCC,OAAfZ,EAAS,QAAYY,OAAN3B,EAAM,M,IAE1D4B,OAAM,SAAAJ,G,IAAGT,EAAQS,EAART,SAAUf,EAAKwB,EAALxB,MAClBN,EAAA+B,OAAOI,QAAQ,oBAAmCF,OAAfZ,EAAS,QAAYY,OAAN3B,EAAM,M,MAE3DO,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('[type=\"submit\"]'),\n};\n\nlet intervalId;\n\nfunction createPromise(position, delay) {\n  const obj = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((res, rej) => {\n    if (shouldResolve) {\n      // Fulfill\n      res(obj);\n    } else {\n      // Reject\n      rej(obj);\n    }\n  });\n}\n\nrefs.submitBtn.addEventListener('click', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const delayToNum = Number(refs.delay.value);\n  const stepToNum = Number(refs.step.value);\n  let totalMs;\n  const toNum = Number(refs.amount.value);\n\n  for (let i = 0; i < toNum; i += 1) {\n    totalMs = delayToNum + stepToNum;\n    clearInterval(intervalId);\n  }\n\n  intervalId = setInterval(() => {\n    createPromise(delayToNum, stepToNum)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }, delayToNum);\n}\n"],"names":["$ce04d3a99e08e73b$var$intervalId","$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","submitBtn","addEventListener","e","preventDefault","delayToNum","Number","value","stepToNum","toNum","i","clearInterval","setInterval","position","obj","shouldResolve","Math","random","Promise","res","rej","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.b3cebc55.js.map"}